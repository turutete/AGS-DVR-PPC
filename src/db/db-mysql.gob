requires 2.0.0

%h{
#include <ags-cf.h>
#include <queryif.h>
#include <mysql.h>
%}

%{
/**
   \file db-mysql.c
*/

#undef  G_LOG_DOMAIN
#define G_LOG_DOMAIN "db-mysql"

#ifdef AGS_DEBUG
#undef  ags_debug
#define ags_debug(level, format,...)  if(level<AGS_DEBUG) g_log(G_LOG_DOMAIN, G_LOG_LEVEL_DEBUG, ("%s: " format), __GOB_FUNCTION__, ##__VA_ARGS__)
#else
#define ags_debug(...) 
#endif
%}

%privateheader{
typedef struct _RowData RowData;
struct _RowData {
  MYSQL_RES        *result;
  QueryRowCallback cb;
  gpointer         user_data;
};

%}

class DB:MySQL from G:Object (interface :QueryIf) {

private MYSQL mysql;
private char* host   = NULL;
private char* user   = NULL;
private char* passwd = NULL;
private char* dbname = NULL;

public
GObject*
new (char* db_name, AgsCf* cf, CfTable cft)
  {
    GObject *ret = G_OBJECT(GET_NEW);
    DBMySQL *o   = DB_MYSQL(ret);
    CfTable  my_cft=config_get_table(CONFIGIF(cf), cft, db_name);

    o->_priv->host   = config_get_string(CONFIGIF(cf), my_cft, "host");
    o->_priv->user   = config_get_string(CONFIGIF(cf), my_cft, "user");
    o->_priv->passwd = config_get_string(CONFIGIF(cf), my_cft, "passwd");
    o->_priv->dbname = config_get_string(CONFIGIF(cf), my_cft, "dbname");

    MYSQL *db=&(o->_priv->mysql);
    mysql_init(db);
    mysql_options(db, MYSQL_READ_DEFAULT_GROUP, db_name);
    
    if (!mysql_real_connect(db, o->_priv->host, o->_priv->user, o->_priv->passwd, o->_priv->dbname, 0, NULL, 0)) {
      g_error("Failed to connect to database: Error: %s\n", mysql_error(db));
    }

    return ret;
  }

private
int
row_handler(gpointer data)
  {
    RowData *row_data = (RowData*) data;
    MYSQL_ROW row;
    gboolean ret=TRUE;

    unsigned int num_fields = mysql_num_fields(row_data->result);
    MYSQL_FIELD *fields     = mysql_fetch_fields(row_data->result);

    while(ret && (row = mysql_fetch_row(row_data->result))) {
      unsigned long *lengths;
      lengths = mysql_fetch_lengths(row_data->result); /* XXX ¿? */
      GArray *garray = g_array_sized_new(FALSE, TRUE, sizeof(GValue), num_fields);
      int i;
      for(i=0; i < num_fields; i++) {
	GValue vv={0,};
	GValue *v=&vv;
	/* "demarshalling" de tipos MySQL->GValue */
	if(IS_NUM(fields[i].type)) {
	  g_value_init(v, G_TYPE_INT);
	  g_value_set_int(v, atoi(row[i]));
	  g_array_append_val(garray, *v);
	} else {
	  g_value_init(v, G_TYPE_STRING);
	  g_value_set_string(v, row[i]?row[i]:"NULL");
	  g_array_append_val(garray, *v);
	}
	/* XXX manejar tipos fecha */
      }

      /* llamar "callback" de fila */
      ret=row_data->cb(garray, row_data->user_data);
    }

    /* clean */
    mysql_free_result(row_data->result);
    g_free(row_data);

    return FALSE;
  }

 interface :QueryIf private int exec(QueryIf *self (check null type), char *qstr, int qlen, char ***col_names, QueryRowCallback cb, gpointer user_data)
   {
     DBMySQL *o  = DB_MYSQL(self);
     MYSQL   *db =&(o->_priv->mysql);
     MYSQL_RES *result=NULL;
     GPtrArray *gparray;
     int i;

     int error=mysql_real_query(db, qstr, qlen?qlen:strlen(qstr) );
     if(!error) {
       /* ok */
       result=mysql_store_result(db);
       if(result) {
	 /* ok */
	 unsigned int num_fields;
	 num_fields = mysql_num_fields(result);
	 /* Nombre de columnas */
	 if(col_names) {
	   MYSQL_FIELD *fields;
	   fields = mysql_fetch_fields(result);

	   gparray = g_ptr_array_new ();
	   for(i=0; i<num_fields; i++) {
	     g_ptr_array_add(gparray, (gpointer) fields[i].name);
	   }
	   g_ptr_array_add(gparray, (gpointer) NULL);
	   
	   *col_names=g_ptr_array_free(gparray, FALSE);
	 }

	 /* Filas */
	 if(cb) {
	   RowData* row_data=g_new0(RowData, 1);
	   row_data->result=result;
	   row_data->cb=cb;
	   row_data->user_data=user_data;
	   g_timeout_add(0, self_row_handler, (gpointer) row_data);
	 } else {
	   /* clean */
	   mysql_free_result(result);
	 }
       } else {
	 /* query sin resultado */
	 if(mysql_errno(db)) {
	   g_critical("Error en resultado: %s", mysql_error(db)); /* XXX ¿leak? */
	 }
       }
     } else {
       /* error */
       g_critical("Error en query: %s", mysql_error(db));
     }

     return result; /* XXX */
   }
}

%{
  GObject *(*dbmysql_new())(char*, AgsCf*, CfTable)
    {
      return self_new;
    }
%}
