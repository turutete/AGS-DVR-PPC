requires 2.0.0

%h{
#include <glib-2.0/glib-object.h>
#include <ags-sdsx.h>
#include <ags-cf.h>
#include "accessif.h"
#include "createif.h"
#include <configif.h>
#include "snmp-gvalue.h"
#include <ags-valuetypes.h>

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <string.h>
%}

%{
  /**
     \file sdsx-snmp.c
     \todo
     - implementar interface accessx.
     - leer de configuración: SNMP_APP, SNMP_HOST, SNMP_COMMUNITY, ... HECHO.
     - get() debe retornar un GValue. HECHO.
  */
/**
   \page sdsxsnmp SdsXSnmp
   \section sdsxsnmp_desc DESCRIPCIÓN
   Conector que permite mapear las \ref interfaces \ref accessif y \ref accessxif
   a peticiones SNMP. También mapea los "traps" SNMPv2 a la señal \ref trapsig.
   \section sdsxsnmp_reqs REQUISITOS
     \subsection sdsxsnmp_deps Dependencias
     NINGUNO
     \subsection sdsxsnmp_pres Precarga
     NINGUNA
     \subsection sdsxsnmp_evs  Eventos
     NINGUNO
     \subsection sdsxsnmp_cfs Configuración
        -# host
	   - Tipo: G_TYPE_STRING
	   - Requerida
	   - Descripción: Dirección del agente SNMP al que conectar.
	-# community
	   - Tipo: G_TYPE_STRING
	   - Requerida
	   - Descripción: Clave a utilizar en la conexión SNMP.
	-# cache
	   - Tipo: G_TYPE_BOOLEAN
	   - Opcional (falso por defecto)
	   - Descripción: Usar "cache" (acceso asíncrono).
	-# trapd
	   - Tipo: G_TYPE_BOOLEAN
	   - Opcional (falso por defecto)
	   - Descripción: Recibir "traps".
	-# transport
	   - Tipo: G_TYPE_STRING
	   - Opcional ("udp:162" por defecto)
	   - Descripción: Transporte para recibir "traps".
   \section sdsxsnmp_feas CARACTERÍSTICAS
     \subsection sdsxsnmp_ifs  Implementa
        -# \ref accessif
	-# \ref accessxif
     \subsection sdsxsnmp_sigs Señales
        -# \ref trapsig
     \subsection sdsxsnmp_props Propiedades
        -# cache
	-# community
  \section sdsxsnmp_srcs FUENTES
     - \ref sdsx-snmp.c
     - \ref sdsx-snmp.h
*/
  /** \addtogroup sdsmods Módulos SDS
   */
  /*@{*/

  /** \defgroup sdsxsnmp
   */
  /*@{*/

#undef  G_LOG_DOMAIN
#define G_LOG_DOMAIN "sdsx-snmp"

#ifdef AGS_DEBUG
#undef  ags_debug
#define ags_debug(level, format,...)  if(level<AGS_DEBUG) g_log(G_LOG_DOMAIN, G_LOG_LEVEL_DEBUG, ("%s: " format), __GOB_FUNCTION__, ##__VA_ARGS__)
#else
#define ags_debug(...) 
#endif

  /* XXX */
static int      n_pfd;
static GPollFD* pfd;
static fd_set fdset;
%}

%privateheader{
#define MAX_REQUESTS 1

typedef struct _CacheEntry CacheEntry;
struct _CacheEntry {
  char*          key;
  GValue*        val;
};
%}

class SdsX:Snmp from Ags:SdsX (interface :AccessIf)  (interface :AccessxIf) {

private struct snmp_session *session         = NULL
  unrefwith snmp_close;

signal last INT (LONG, STRING, BOXED_G_TYPE_VALUE_ARRAY, BOXED_G_TYPE_VALUE_ARRAY) gint trapsig(self, long uptime, char* t, GPtrArray* m, GPtrArray* v) defreturn TRUE;
/* XXX señal de respuesta cuando peticiones "async" */

private GHashTable *cache_hashtable = { g_hash_table_new_full(g_str_hash, g_str_equal, NULL, NULL) };
private GData      *reqid_datalist = NULL;
private GData      *order_datalist = NULL;

private gboolean cache;
property BOOLEAN cache
  (nick  = "Cache",
   blurb = "Usar cache")
  set { self->_priv->cache = g_value_get_boolean(VAL); }
  get { g_value_set_boolean(VAL, self->_priv->cache);  };
private gboolean trapd;

private char* name      = NULL unrefwith g_free;
private char* host      = NULL unrefwith g_free;
private char* transport = NULL unrefwith g_free;
private char* community = NULL unrefwith g_free;
property STRING community
  (nick  = "Community",
   blurb = "Community string")
 set { 
  const gchar *comm=g_value_get_string(VAL);
  if(comm) {
    /* Liberar "community" anterior */
    if(self->_priv->community) 
      g_free(self->_priv->community);
    /* Establecer propiedad "community" nueva */
    self->_priv->community=g_strdup(comm);
    /* Actualizar "community" de "session" */
    self->_priv->session->community     = self->_priv->community;
    self->_priv->session->community_len = strlen(self->_priv->community);
  }
 }
 get { g_value_set_string(VAL, self->_priv->community ); };
 /* XXX propiedades (+opciones config.) timeout y retries */

public GObject *
  new (char *sdsx_name, AgsCf *cf, CfTable cft) {
  GObject *ret = G_OBJECT(GET_NEW);

  CfTable my_cft=config_get_table(CONFIGIF(cf), cft, sdsx_name);
  SDSX_SNMP(ret)->_priv->name=g_strdup(sdsx_name);
  SDSX_SNMP(ret)->_priv->host=config_get_string(CONFIGIF(cf), my_cft, "host");  
  SDSX_SNMP(ret)->_priv->community=config_get_string(CONFIGIF(cf), my_cft, "community");

  SDSX_SNMP(ret)->_priv->cache=config_get_boolean(CONFIGIF(cf), my_cft, "cache");
  SDSX_SNMP(ret)->_priv->trapd=config_get_boolean(CONFIGIF(cf), my_cft, "trapd");

  char* transport=config_get_string(CONFIGIF(cf), my_cft, "transport");
  SDSX_SNMP(ret)->_priv->transport=transport?transport:"udp:162";

  ags_debug(1,"host = %s", SDSX_SNMP(ret)->_priv->host);
  ags_debug(1,"community = %s", SDSX_SNMP(ret)->_priv->community);

  self_sdsx_access_init(SDSX_SNMP(ret));
  if(SDSX_SNMP(ret)->_priv->trapd)
    self_sdsx_trapd_init(SDSX_SNMP(ret));

  /* Si "trapd" o "cache", nos registramos en el "mainloop" */
  if(SDSX_SNMP(ret)->_priv->trapd || SDSX_SNMP(ret)->_priv->cache) {
    int fd;
    int fds = 0, block = 1;
    struct timeval timeout;
    GSource *snmp_source;
    static GSourceFuncs snmp_source_funcs = {
      .prepare  = self_snmp_prepare,
      .check    = self_snmp_check,
      .dispatch = self_snmp_dispatch
    };
    
    FD_ZERO(&fdset);
    snmp_select_info(&fds, &fdset, &timeout, &block);

    snmp_source = g_source_new(&snmp_source_funcs, sizeof(GSource));
    
    n_pfd=fds;
    pfd=calloc(n_pfd, sizeof(GPollFD));
    int i=0;
    for(fd=0;fd<FD_SETSIZE;fd++) {
      if(FD_ISSET(fd, &fdset)) {
	ags_debug(6,"añadiendo fd=%d", fd);
	pfd[i].fd=fd;
	pfd[i].events = G_IO_IN | G_IO_PRI | G_IO_HUP | G_IO_ERR;
	g_source_add_poll(snmp_source, &pfd[i]);
	i++;
      }
    }
    
    g_source_attach(snmp_source, NULL);
  }
  
  return G_OBJECT (ret);
}

private
int
snmp_prepare(GSource *source, gint *timeout_)
  {
    ags_debug(5, "prepare");
    *timeout_=5000;
    return FALSE;
  }
private
int
snmp_check(GSource *source)
  {
    int i;

    ags_debug(5, "check %d fds", n_pfd);
    for(i=0; i<n_pfd; i++) {
      ags_debug(6, "check %d=%d", i, pfd[i].revents); fflush(NULL);
      if(pfd[i].revents && G_IO_IN) {
	return TRUE;
      }
    }

    snmp_timeout(); /* VITAL */

    return FALSE;
  }
private
int
snmp_dispatch(GSource *source, GSourceFunc callback, gpointer user_data)
  {
    int count, i;
    struct timeval  to = { LONG_MAX, 0 };
    struct timeval* timeout = &to;

    ags_debug(5, "despachando!");

    timeout->tv_sec = 0;
    timeout->tv_usec = 0;
    /* nuestro propio "check and process" */
    if( count = select(n_pfd, &fdset, 0, 0, timeout) )
      snmp_read(&fdset);
    
    return TRUE;
  }

private
netsnmp_variable_list*
find_var(netsnmp_variable_list* vars, oid* OID, size_t OID_len)
  {
    netsnmp_variable_list* found;

    for ( found = vars; found; found=found->next_variable) {
      if ( !snmp_oid_compare(found->name, found->name_length, OID, OID_len) )
	break;
    }
    return found;
  }

private
int
snmp_response(int op, netsnmp_session *session,
	      int reqid, netsnmp_pdu *pdu, void *magic)
  {
    SdsXSnmp *self = SDSX_SNMP(magic);
    struct variable_list *vars;
    GValue *v=NULL;

    char* key=(char*) g_datalist_id_remove_no_notify(&self->_priv->reqid_datalist, (GQuark)reqid);

    /* Si no presente en reqid_datalist, no nos interesa */
    if(!key)
      return 1;

    switch(op) {
    case  NETSNMP_CALLBACK_OP_RECEIVED_MESSAGE:
      switch(pdu->command) {
      case SNMP_MSG_RESPONSE:
	for(vars = pdu->variables; vars; vars = vars->next_variable) { /* XXX */
	  snmp_gvalue_demarshall(vars, &v);
	  if(v) {
	    /* OID -> string */
	    gboolean free_string=TRUE;
	    GString *gs_oid=g_string_sized_new(128);
	    int i;
	    for(i=0; i<vars->name_length; i++)
	      g_string_append_printf(gs_oid, ".%ld", (vars->name)[i] );
	    /* cachea */
	    CacheEntry *centry;
	    centry = g_hash_table_lookup(self->_priv->cache_hashtable, gs_oid->str);
	    if(!centry) {
	      centry = g_new0(CacheEntry, 1);
	      centry->key=gs_oid->str;
	      centry->val=v;
	      g_hash_table_insert(self->_priv->cache_hashtable, centry->key, centry);
	      free_string=FALSE;
	    } else {
	      g_value_unset(centry->val);
	      g_free(centry->val);
	      centry->val=v;
	    }
	    /* si se trata de un GETNEXT, guardamos orden */
	    if(strcmp(gs_oid->str, key) != 0) {
	      char* old_next=g_datalist_remove_no_notify(&self->_priv->order_datalist, key);
	      if(old_next)
		g_free(old_next);
	      g_datalist_set_data(&self->_priv->order_datalist, key, gs_oid->str);
	      free_string=FALSE;
	    }
	    /* clean */
	    g_string_free(gs_oid, free_string);
	  }
	}
	break;
      default:
	return 1;
	break;
      }
      break;
    case NETSNMP_CALLBACK_OP_TIMED_OUT:
      g_critical("TIMED_OUT"); /* XXX */
      break;
    case NETSNMP_CALLBACK_OP_SEND_FAILED:
      g_critical("SEND FAILED"); /* XXX */
      break;
    case NETSNMP_CALLBACK_OP_CONNECT:
      g_critical("CONNECT"); /* XXX */
      break;
    case NETSNMP_CALLBACK_OP_DISCONNECT:
      g_critical("DISCONNECT"); /* XXX */
      break;
    }

    g_free(key);
      
    return 0; /* XXX */
  }

private
int
snmp_trap(int op, netsnmp_session *session,
           int reqid, netsnmp_pdu *pdu, void *magic)
  {
    oid snmpTrapOID[]    = { 1, 3, 6, 1, 6, 3, 1, 1, 4, 1, 0 };
    oid sysUpTime[]      = { 1, 3, 6, 1, 2, 1, 1, 3, 0 };
    netsnmp_variable_list* vars;
    netsnmp_variable_list *trapvar, *uptimevar;
    long  uptime;
    char* trapoid;
    GValueArray* members=NULL;
    GValueArray* values=NULL;
    int i;
    GString* gs_member;
    GValue* v=NULL;

    ags_debug(2, "TRAP!");

    switch(op) {
    case  NETSNMP_CALLBACK_OP_RECEIVED_MESSAGE:
      switch(pdu->command) {
      case SNMP_MSG_TRAP:
	/* XXX */
	break;
      case SNMP_MSG_TRAP2:
      case SNMP_MSG_INFORM:
	vars = pdu->variables;
	
	uptimevar=self_find_var(vars, sysUpTime, OID_LENGTH(sysUpTime));
	if (!uptimevar) {
	  g_critical("No encuentro Uptime!");
	  return 1;
	}
	trapvar=self_find_var(vars, snmpTrapOID, OID_LENGTH(snmpTrapOID));
	if (!trapvar) {
	  g_critical("No encuentro identificador de trap!");
	  return 1;
	}

	/* UPTIME -> long */
	snmp_gvalue_demarshall(uptimevar, &v);
	uptime = (long) g_value_get_timeticks(v);
	/* clean */
	g_value_unset(v);
	g_free(v);
	/* TRAPOID -> char* */
	snmp_gvalue_demarshall(trapvar, &v);
	trapoid = g_strdup_value_contents(v);
	/* clean */
	g_value_unset(v);
	g_free(v);

	/* members y values */
	members = g_value_array_new(0);
	values  = g_value_array_new(0);
	for(; vars; vars=vars->next_variable) {
	  /* saltamos 'uptime' y 'trapoid' */
	  if( snmp_oid_compare(vars->name, vars->name_length, sysUpTime, OID_LENGTH(sysUpTime)) == 0
	      || snmp_oid_compare(vars->name, vars->name_length, snmpTrapOID, OID_LENGTH(snmpTrapOID)) == 0)
	    continue;
	  /* OID -> string */
	  gs_member = g_string_new("");
	  for(i=0; i<vars->name_length; i++)
	    g_string_append_printf(gs_member, ".%ld", (vars->name)[i] );
	  
	  /* clave -> GValue */
	  v=g_new0(GValue, 1);
	  g_value_init(v, G_TYPE_STRING);
	  g_value_set_string(v, gs_member->str);
	  g_value_array_append(members, v);
	  /* clean */
	  g_string_free(gs_member, TRUE);
	  g_value_unset(v);
	  g_free(v);

	  /* valor -> GValue */
	  snmp_gvalue_demarshall(vars, &v);
	  g_value_array_append(values, v);
	  /* clean */
	  g_value_unset(v);
	  g_free(v);
	}

	/* emitimos "trapsig" */
	self_trapsig(SDSX_SNMP(magic), uptime, trapoid, members, values);
	/* XXX clean */
	g_free(trapoid);
	g_value_array_free(members);
	g_value_array_free(values);
	break;
      default:
	return 1;
	break;
      }
    }

    return 0;
  }
private
void
sdsx_trapd_init(self)
  {
    netsnmp_session session, *rc=NULL;
    netsnmp_transport* transport = NULL;

    transport = netsnmp_tdomain_transport(SDSX_SNMP(self)->_priv->transport, 1, NULL);
    if(transport == NULL) {
      g_critical("No se pudo crear transporte. ¿Faltan privilegios? ¿Ya usado?");
      return;
    }

    snmp_sess_init(&session);
    session.peername = SNMP_DEFAULT_PEERNAME;  /* XXX leer de configuración? */
    session.version = SNMP_DEFAULT_VERSION;
    session.community_len = SNMP_DEFAULT_COMMUNITY_LEN;
    session.callback = self_snmp_trap;
    session.callback_magic = (void *) self;
    session.authenticator = NULL;
    session.isAuthoritative = SNMP_SESS_UNKNOWNAUTH;

    rc = snmp_add(&session, transport, NULL, NULL);
    if (rc == NULL) {
      g_error("No se pudo añadir transporte a sesión.");
    }
  }

private
void
sdsx_access_init(self) {
  struct snmp_session session;

  ags_debug(1,"snmp::init name = %s", SDSX_SNMP(self)->_priv->name);

  /* Inicializar Net-SNMP */
  init_snmp(SDSX_SNMP(self)->_priv->name);

  /* Inicializar sesión */
  snmp_sess_init( &session );
  session.peername      = SDSX_SNMP(self)->_priv->host;
  session.version       = SNMP_VERSION_2c;
  session.community     = SDSX_SNMP(self)->_priv->community;
  session.community_len = strlen(session.community);
  /* callback de "session" si "cache" */
  if(self->_priv->cache) {
    session.callback        = self_snmp_response;
    session.callback_magic  = (void *) self;
  }

  SOCK_STARTUP; /* Inicialización win32 (vacío en Linux) */

  /* Abrimos sesión */
  self->_priv->session = snmp_open(&session);

  /* Comprobación de error al abrir sesión */
  if (!self->_priv->session) {
    /* Se produjo un error al abrir sesión, abortamos */
    snmp_sess_perror("No se pudo crear sesión SNMP", &session);
    snmp_log(LOG_ERR, "snmp_sess_session()\n");
    g_error("Creando sesión SNMP.");
  }
}

/**

*/

private
GValue*
snmpget_sync(self, struct snmp_pdu *pdu) {
  GValue *v=NULL;
  int status;
  struct snmp_pdu *response;
  struct variable_list *vars;
  
  ags_debug(2,"SNMPGET: Query");
  status = snmp_synch_response(self->_priv->session, pdu, &response);
  ags_debug(2,"SNMPGET: Response=%d", status);
  
  if (status == STAT_SUCCESS && response->errstat == SNMP_ERR_NOERROR) {
    for(vars = response->variables; vars; vars = vars->next_variable) { /* XXX */
      snmp_gvalue_demarshall(vars, &v);
    }
  } else {    
    if (status == STAT_SUCCESS) {
      ags_debug(1, "Error in packet. Reason: %s\n", snmp_errstring(response->errstat));
    } else if (response) {
      char* errstring=NULL;
      errstring=snmp_api_errstring(response->errstat);
      ags_debug(1, "snmpget: %s", errstring);
    }
  }
  
  if (response)
    snmp_free_pdu(response);

  return v;
}

private
  GValue*
  snmpget(self, char *k) {

  struct snmp_pdu *pdu;
  GValue *v=NULL;
  oid anOID[MAX_OID_LEN];
  size_t anOID_len = MAX_OID_LEN;
  int liberr, syserr;
  char *errstr;
  int reqid;
  GValue     *v_cached = NULL;
  CacheEntry *centry   = NULL;

  ags_debug(2,"SNMPGET: creando PDU");
  pdu = snmp_pdu_create(SNMP_MSG_GET);
  read_objid(k, anOID, &anOID_len);
  
  ags_debug(2,"SNMPGET: NULL var");
  snmp_add_null_var(pdu, anOID, anOID_len);

  if(self->_priv->cache) {
    /* enviar petición para que se refresque valor de cache */
    if(reqid=snmp_send(self->_priv->session, pdu)) {
      /* no error, get enviado */
      g_datalist_id_set_data(&self->_priv->reqid_datalist, (GQuark)reqid, g_strdup(k));
    } else {
      snmp_error(self->_priv->session, &liberr, &syserr, &errstr);
      g_critical("SNMP write error %s.\n", errstr);
      free(errstr);
    }
    /* obtener valor de cache */
    if(centry = (CacheEntry*) g_hash_table_lookup(self->_priv->cache_hashtable, k) )
      v_cached=centry->val;
    /* si no está en cache, esperamos respuesta */
    if(!v_cached) {
      snmp_read(&fdset);
      if(centry = (CacheEntry*) g_hash_table_lookup(self->_priv->cache_hashtable, k) )
	v_cached=centry->val;
    }
    /* debemos devolver una GValue nuevo, no el guardado en la cache */
    if(v_cached) {
      v=g_new0(GValue, 1);
      g_value_init(v, G_VALUE_TYPE(v_cached));
      g_value_copy(v_cached, v);
    } else {
      /* XXX ¿No existe en la MIB? ¿o timeout? */
      g_critical("GET: No se encontró objecto %s", k);
    }
  } else { /* si no usamos cache, petición síncrona esperando respuesta */
    v=self_snmpget_sync(self, pdu);
  }
  return v;
}


private
  GString*
  snmpget_string(self, char *k) {

  struct snmp_pdu *pdu;
  oid anOID[MAX_OID_LEN];
  size_t anOID_len = MAX_OID_LEN;
  //---
  int status;
  struct snmp_pdu *response;
  struct variable_list *vars;

  ags_debug(2,"SNMPGET_STRING: creando PDU");
  pdu = snmp_pdu_create(SNMP_MSG_GET);
  read_objid(k, anOID, &anOID_len);
  
  ags_debug(2,"SNMPGET_STRING: NULL var");
  snmp_add_null_var(pdu, anOID, anOID_len);
  
  ags_debug(2,"SNMPGET_STRING: Query");
  status = snmp_synch_response(self->_priv->session, pdu, &response);
  ags_debug(2,"SNMPGET_STRING: Response=%d", status);
  
  GString *aux;
  if (status == STAT_SUCCESS && response->errstat == SNMP_ERR_NOERROR) {
    for(vars = response->variables; vars; vars = vars->next_variable) { /* XXX */
      //snmp_gvalue_demarshall(vars, &v);
      //---
      aux=g_string_new_len(vars->val.string, vars->val_len);
      aux=g_string_append_c(aux, '\0');
      //g_value_set_string(*v, aux->str);
      //g_string_free(aux, TRUE);
      //---
    }
  } else {
    if (status == STAT_SUCCESS) {
      ags_debug(1, "Error in packet. Reason: %s\n", snmp_errstring(response->errstat));
    } else if (response) {
      char* errstring=NULL;
      errstring=snmp_api_errstring(response->errstat);
      ags_debug(1, "snmpget_string: %s", errstring);
    }
  }
  
  if (response)
    snmp_free_pdu(response);

  return aux;
}


private
gchar*
snmpgetnextkey_sync(self, struct snmp_pdu *pdu) {
  struct snmp_pdu *response;
  gchar* s=NULL;
  int status;
  struct variable_list *vars;

  ags_debug(2,"SNMPGETNEXT: Query");
  status = snmp_synch_response(self->_priv->session, pdu, &response);
  ags_debug(2,"SNMPGETNEXT: Response=%d", status);

  if (status == STAT_SUCCESS && response->errstat == SNMP_ERR_NOERROR) {
    vars = response->variables;

    GString *gs_oid=g_string_sized_new(128);
    g_string_truncate(gs_oid, 0);
    oid *node_oid=vars->name;
    size_t node_oid_len=vars->name_length;
    int i;
    for(i=0;i<node_oid_len;i++) {
      g_string_append_printf(gs_oid, ".%ld", *(node_oid+i));
    }
    gs_oid=g_string_append_c(gs_oid, '\0');
    s=gs_oid->str;
    g_string_free(gs_oid, FALSE);
  } else {
    if (status == STAT_SUCCESS)
      g_critical("Error in packet. Reason: %s\n", snmp_errstring(response->errstat));
    else {
      g_critical("session=%p community=%s community_len=%d\n", self->_priv->session, self->_priv->session->community, self->_priv->session->community_len);
      snmp_sess_perror("snmpgetnext", self->_priv->session); /* XXX */
    }
  }

  if (response)
    snmp_free_pdu(response);

  return s;
}

private
  gchar*
  snmpgetnextkey(self, char *k) {
  struct snmp_pdu *pdu;
  
  oid anOID[MAX_OID_LEN];
  size_t anOID_len = MAX_OID_LEN;

  gchar* s=NULL;
  int liberr, syserr;
  char *errstr;
  int reqid;

  ags_debug(2,"SNMPGETNEXT: creando PDU");
  pdu = snmp_pdu_create(SNMP_MSG_GETNEXT);
  read_objid(k, anOID, &anOID_len);

  ags_debug(2,"SNMPGETNEXT: NULL var");
  snmp_add_null_var(pdu, anOID, anOID_len);

  if(self->_priv->cache) {
    /* enviar petición para que se refresque valor de cache */
    if(reqid=snmp_send(self->_priv->session, pdu)) {
      /* no error, get enviado */
      g_datalist_id_set_data(&self->_priv->reqid_datalist, (GQuark)reqid, g_strdup(k));
    } else {
      snmp_error(self->_priv->session, &liberr, &syserr, &errstr);
      g_critical("SNMP write error %s.\n", errstr);
      free(errstr);
    }
    /* obtener "nextkey" de "datalist" de orden */
    gchar *s_datalist=g_datalist_get_data(&self->_priv->order_datalist, k);
    /* si no está en cache, esperamos respuesta */
    if(!s_datalist) {
      snmp_read(&fdset);
      s_datalist=g_datalist_get_data(&self->_priv->order_datalist, k);
    }
    /* debemos devolver una cadena nueva, no la guardada en la datalist */
    if(s_datalist) {
      s=g_strdup(s_datalist);
    } else {
      /* XXX ¿No existe en la MIB? ¿o timeout? */
    }
  } else { /* si no usamos cache, petición síncrona esperando respuesta */
    s=self_snmpgetnextkey_sync(self, pdu);
  }

  return s;
}

private int
  snmpset(self, char *k, GValue *v) {
  struct snmp_pdu *pdu;
  struct snmp_pdu *response;
  struct snmp_gvalue *snmp_gv;
  int res=-1; /* error, set no realizado */
  
  oid anOID[MAX_OID_LEN];
  size_t anOID_len = MAX_OID_LEN;
  
  int status;

  pdu = snmp_pdu_create(SNMP_MSG_SET);
  snmp_parse_oid(k, anOID, &anOID_len);
  
  if(snmp_gvalue_marshall(&snmp_gv, v)) {
    snmp_pdu_add_variable(pdu, anOID, anOID_len, snmp_gv->type, snmp_gv->data, snmp_gv->len);
    free(snmp_gv);
    status = snmp_synch_response(self->_priv->session, pdu, &response);
    
    if (status == STAT_SUCCESS && response->errstat == SNMP_ERR_NOERROR) { 
      res=0; /* no error, set realizado */
    } else {
      if (status == STAT_SUCCESS)
	g_critical("Error in packet. Reason: %s\n", snmp_errstring(response->errstat));
      else
	snmp_sess_perror("snmpget", self->_priv->session);    
    }

    if (response)
      snmp_free_pdu(response);
  }

  return res;
}
 
/* Interfaces */ 
 interface :AccessIf private GValue *get(AccessIf *self (check null type), char *k)
   {
     GValue *v;

     ags_debug(2,"en snmp::get");
     v=self_snmpget(SDSX_SNMP(self), k);
     return v;
   }
 interface :AccessIf private GString *get_string(AccessIf *self (check null type), char *k)
   {
     GString *v;

     ags_debug(2,"en snmp::get");

     v=self_snmpget_string(SDSX_SNMP(self), k);
     return v;
   }
 interface :AccessIf private int set(AccessIf *self (check null type), char *k, GValue *v)
   {
     int res;

     ags_debug(2,"en snmp::set");
     res=self_snmpset(SDSX_SNMP(self), k, v);
     return res;
   }
 interface :AccessxIf private gchar* getnextkey(AccessxIf *self (check null type), char *k)
   {
     gchar* s;

     ags_debug(2,"en snmp::getnextkey");
     s=self_snmpgetnextkey(SDSX_SNMP(self), k);
     ags_debug(1, "nextkey=|%s|", s);

     return s;     
   }
}

%{
  GObject* (*sdsxsnmp_new(void))(char *sds_name, AgsCf *cf, CfTable cft)
    {
      return self_new;
    }
  /*@}*/
  /*@}*/

%}
